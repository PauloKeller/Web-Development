// Code generated by MockGen. DO NOT EDIT.
// Source: create_address.go

// Package usecases is a generated GoMock package.
package usecases

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCreateAddress is a mock of CreateAddress interface
type MockCreateAddress struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAddressMockRecorder
}

// MockCreateAddressMockRecorder is the mock recorder for MockCreateAddress
type MockCreateAddressMockRecorder struct {
	mock *MockCreateAddress
}

// NewMockCreateAddress creates a new mock instance
func NewMockCreateAddress(ctrl *gomock.Controller) *MockCreateAddress {
	mock := &MockCreateAddress{ctrl: ctrl}
	mock.recorder = &MockCreateAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateAddress) EXPECT() *MockCreateAddressMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCreateAddress) Create(userID, countryID, stateID, cityID, streetID, number, complement string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, countryID, stateID, cityID, streetID, number, complement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCreateAddressMockRecorder) Create(userID, countryID, stateID, cityID, streetID, number, complement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateAddress)(nil).Create), userID, countryID, stateID, cityID, streetID, number, complement)
}
