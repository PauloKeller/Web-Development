// Code generated by MockGen. DO NOT EDIT.
// Source: postgres_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCartsRepository is a mock of CartsRepository interface
type MockCartsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartsRepositoryMockRecorder
}

// MockCartsRepositoryMockRecorder is the mock recorder for MockCartsRepository
type MockCartsRepositoryMockRecorder struct {
	mock *MockCartsRepository
}

// NewMockCartsRepository creates a new mock instance
func NewMockCartsRepository(ctrl *gomock.Controller) *MockCartsRepository {
	mock := &MockCartsRepository{ctrl: ctrl}
	mock.recorder = &MockCartsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCartsRepository) EXPECT() *MockCartsRepositoryMockRecorder {
	return m.recorder
}

// InsertProductIntoCart mocks base method
func (m *MockCartsRepository) InsertProductIntoCart(cartID, productID string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductIntoCart", cartID, productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductIntoCart indicates an expected call of InsertProductIntoCart
func (mr *MockCartsRepositoryMockRecorder) InsertProductIntoCart(cartID, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductIntoCart", reflect.TypeOf((*MockCartsRepository)(nil).InsertProductIntoCart), cartID, productID, quantity)
}
