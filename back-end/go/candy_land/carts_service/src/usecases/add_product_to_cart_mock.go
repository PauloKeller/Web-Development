// Code generated by MockGen. DO NOT EDIT.
// Source: add_product_to_cart.go

// Package usecases is a generated GoMock package.
package usecases

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAddProductToCart is a mock of AddProductToCart interface
type MockAddProductToCart struct {
	ctrl     *gomock.Controller
	recorder *MockAddProductToCartMockRecorder
}

// MockAddProductToCartMockRecorder is the mock recorder for MockAddProductToCart
type MockAddProductToCartMockRecorder struct {
	mock *MockAddProductToCart
}

// NewMockAddProductToCart creates a new mock instance
func NewMockAddProductToCart(ctrl *gomock.Controller) *MockAddProductToCart {
	mock := &MockAddProductToCart{ctrl: ctrl}
	mock.recorder = &MockAddProductToCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAddProductToCart) EXPECT() *MockAddProductToCartMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockAddProductToCart) Add(cartID, productID string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", cartID, productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockAddProductToCartMockRecorder) Add(cartID, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddProductToCart)(nil).Add), cartID, productID, quantity)
}
