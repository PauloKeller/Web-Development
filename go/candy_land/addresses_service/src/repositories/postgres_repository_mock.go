// Code generated by MockGen. DO NOT EDIT.
// Source: postgres_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAddressesRepository is a mock of AddressesRepository interface
type MockAddressesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressesRepositoryMockRecorder
}

// MockAddressesRepositoryMockRecorder is the mock recorder for MockAddressesRepository
type MockAddressesRepositoryMockRecorder struct {
	mock *MockAddressesRepository
}

// NewMockAddressesRepository creates a new mock instance
func NewMockAddressesRepository(ctrl *gomock.Controller) *MockAddressesRepository {
	mock := &MockAddressesRepository{ctrl: ctrl}
	mock.recorder = &MockAddressesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAddressesRepository) EXPECT() *MockAddressesRepositoryMockRecorder {
	return m.recorder
}

// InsertAddress mocks base method
func (m *MockAddressesRepository) InsertAddress(userID, countryID, stateID, cityID, streetID, number, complement string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAddress", userID, countryID, stateID, cityID, streetID, number, complement)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAddress indicates an expected call of InsertAddress
func (mr *MockAddressesRepositoryMockRecorder) InsertAddress(userID, countryID, stateID, cityID, streetID, number, complement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAddress", reflect.TypeOf((*MockAddressesRepository)(nil).InsertAddress), userID, countryID, stateID, cityID, streetID, number, complement)
}
